--- rustc-1.61.0-src/compiler/rustc_target/src/spec/windows_gnu_base.rs.orig	2022-05-18 03:29:36.000000000 +0200
+++ rustc-1.61.0-src/compiler/rustc_target/src/spec/windows_gnu_base.rs	2022-05-22 15:53:32.596861100 +0200
@@ -16,34 +16,13 @@
         ],
     );
 
-    let mut late_link_args = LinkArgs::new();
     let mut late_link_args_dynamic = LinkArgs::new();
     let mut late_link_args_static = LinkArgs::new();
-    // Order of `late_link_args*` was found through trial and error to work with various
-    // mingw-w64 versions (not tested on the CI). It's expected to change from time to time.
-    let mingw_libs = vec![
-        "-lmsvcrt".into(),
-        "-lmingwex".into(),
-        "-lmingw32".into(),
-        "-lgcc".into(), // alas, mingw* libraries above depend on libgcc
-        // mingw's msvcrt is a weird hybrid import library and static library.
-        // And it seems that the linker fails to use import symbols from msvcrt
-        // that are required from functions in msvcrt in certain cases. For example
-        // `_fmode` that is used by an implementation of `__p__fmode` in x86_64.
-        // The library is purposely listed twice to fix that.
-        //
-        // See https://github.com/rust-lang/rust/pull/47483 for some more details.
-        "-lmsvcrt".into(),
-        "-luser32".into(),
-        "-lkernel32".into(),
-    ];
-    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());
-    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);
     let dynamic_unwind_libs = vec![
         // If any of our crates are dynamically linked then we need to use
         // the shared libgcc_s-dw2-1.dll. This is required to support
         // unwinding across DLL boundaries.
-        "-lgcc_s".into(),
+        "-l:libunwind.dll.a".into(),
     ];
     late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());
     late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);
@@ -53,8 +32,7 @@
         // binaries to be redistributed without the libgcc_s-dw2-1.dll
         // dependency, but unfortunately break unwinding across DLL
         // boundaries when unwinding across FFI boundaries.
-        "-lgcc_eh".into(),
-        "-l:libpthread.a".into(),
+        "-l:libunwind.a".into(),
     ];
     late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());
     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);
@@ -64,7 +42,8 @@
         env: "gnu".into(),
         vendor: "pc".into(),
         // FIXME(#13846) this should be enabled for windows
-        function_sections: false,
+        function_sections: true,
+        no_default_libraries: false,
         linker: Some("gcc".into()),
         dynamic_linking: true,
         executables: true,
@@ -80,7 +59,6 @@
         pre_link_objects_fallback: crt_objects::pre_mingw_fallback(),
         post_link_objects_fallback: crt_objects::post_mingw_fallback(),
         crt_objects_fallback: Some(CrtObjectsFallback::Mingw),
-        late_link_args,
         late_link_args_dynamic,
         late_link_args_static,
         abi_return_struct_as_int: true,
diff -urN rustc-1.53.0-src/src/bootstrap/bootstrap.py.orig rustc-1.53.0-src/src/bootstrap/bootstrap.py
--- rustc-1.53.0-src/src/bootstrap/bootstrap.py.orig    2021-07-03 13:57:23.756296000 +0200
+++ rustc-1.53.0-src/src/bootstrap/bootstrap.py 2021-07-03 13:58:41.037817900 +0200
@@ -425,6 +425,12 @@
             with output(self.rustc_stamp(stage0)) as rust_stamp:
                 rust_stamp.write(key)

+            gcc_libs_hack = os.environ.get('GCC_LIBS_HACK')
+            gcc_libs_hack_dest = '{}/rustlib/{}/lib'.format(lib_dir, self.build)
+            shutil.copy(gcc_libs_hack + '/libgcc.a', gcc_libs_hack_dest)
+            shutil.copy(gcc_libs_hack + '/libgcc_eh.a', gcc_libs_hack_dest)
+            shutil.copy(gcc_libs_hack + '/libgcc_s.a', gcc_libs_hack_dest)
+
         if self.rustfmt() and self.rustfmt().startswith(bin_root) and (
             not os.path.exists(self.rustfmt())
             or self.program_out_of_date(self.rustfmt_stamp(), self.rustfmt_channel)
--- rustc-1.61.0-src/compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs.orig	2022-05-22 16:08:33.258876100 +0200
+++ rustc-1.61.0-src/compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs	2022-05-22 16:13:31.577741200 +0200
@@ -7,7 +7,7 @@
         .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "i386pe".to_string()]);
     base.max_atomic_width = Some(64);
     base.frame_pointer = FramePointer::Always; // Required for backtraces
-    base.linker = Some("i686-w64-mingw32-gcc".into());
+    base.linker = Some("i686-w64-mingw32-clang".into());

     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address
     // space available to x86 Windows binaries on x86_64.
--- rustc-1.61.0-src/compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs.orig	2022-05-22 16:08:33.258876100 +0200
+++ rustc-1.61.0-src/compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs	2022-05-22 16:13:31.577741200 +0200
@@ -10,7 +10,7 @@
     base.pre_link_args
         .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".into(), "i386pep".into()]);
     base.max_atomic_width = Some(64);
-    base.linker = Some("x86_64-w64-mingw32-gcc".into());
+    base.linker = Some("x86_64-w64-mingw32-clang".into());
 
     Target {
         llvm_target: "x86_64-pc-windows-gnu".into(),
